name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  check_files:
    name: Check function name 
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}  # Checkout the code from the source branch of the pull request

      # - name: Install required packages
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y grep
      
      # - name: perform fetch
      #   run: git fetch

      - name: branch name
        run: git branch | grep "*"

      - name: get list
        run: ls -R .github

      # - name: Get list of modified files
      #   id: get_files
      #   run: |
      #     echo "::set-output name=files::$(git diff --name-only ${{ github.event.pull_request.base.ref }}...${{ github.event.pull_request.head.ref }})"
      
      - name: Get the list of required functions
        id: get_functions
        run: |
          functions=$(cat .github/scripts/playbook_functions.txt)
          echo "PLAYBOOK_FUNCTIONS=$(echo "$functions" | tr '\n' ' ')" >> $GITHUB_ENV

      
      - name: Get the list of assessment tools
        run: |
          tools=$(cat .github/scripts/assessment_tools.txt | tr '\n' '|')
          tools=${tools%|}
          echo "ASSESSMENT_TOOLS=$(echo "$tools")" >> $GITHUB_ENV

      - name: Print the list of required functions
        run: echo "Required functions= ${{ env.PLAYBOOK_FUNCTIONS }}"

      - name: Print the list of required tools
        run: echo "Required functions= ${{ env.ASSESSMENT_TOOLS }}"

      - name: Check for required functions
        run: |
          function_flag=false
          for file in $(git ls-files | grep -E "${{ env.ASSESSMENT_TOOLS }}" | grep '\-playbook\.sh$'); do
            echo $file
            # Check if the file ends with "-playbook.sh"
            for f in ${{ env.PLAYBOOK_FUNCTIONS }}; do
              echo function=$f
              echo function_flag=$function_flag
              if ! grep -q -w "function $f" $file
              then
                echo "inside if"
                echo "Missing function $f in $file"
                function_flag=true
              fi
            done
          done
          echo function_flag=$function_flag
          if [[ $function_flag == true ]] 
          then
            exit 1
          fi
