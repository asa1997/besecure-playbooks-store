name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  Required_files:
    name: Checking for required files
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
      
      - name: List all changed files
        env:
          MODIFIED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          for file in "${{ env.MODIFIED_FILES }}"; do
            echo "$file was changed"
          done
          echo "MODIFIED_FILES=${{ env.MODIFIED_FILES }}" >> $GITHUB_ENV

      - name: Print files
        run: echo "${{ env.MODIFIED_FILES }}"

      - name: Run ls
        run: ls -R .
      
      - name: Get the list of assessment tools
        run: |
          tools=$(cat .github/scripts/assessment_tools.txt | tr '\n' '|')
          tools=${tools%|}
          echo "ASSESSMENT_TOOLS=$(echo "$tools")" >> $GITHUB_ENV

      - name: Check if steps file present
        run: |
          steps_flag=false
          for file in $(echo "${{ env.MODIFIED_FILES }}" | grep -E "${{ env.ASSESSMENT_TOOLS }}" | grep '\-playbook\.sh$'); do
            echo "file=$file"
            tool_name=$(echo "$file" | cut -d "-" -f 2)
            version=$(echo "$file" | cut -d "-" -f 3)
            if ! echo "${{ env.MODIFIED_FILES }}" | grep -q "besman-$tool_name-$version-steps"
            then
              steps_flag=true
            elif ! ls -R . | grep -q "besman-$tool_name-$version-steps"
            then
              steps_flag=true
            fi
            if [[ "steps_flag" == "true" ]]
            then
              echo "Could not find steps file for besman-$tool_name-$version-playbook.sh"
              exit 1
            fi
          done


  Required_functions:
    name: Checking for required functions
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
      
      - name: List all changed files
        env:
          MODIFIED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          for file in "${MODIFIED_FILES}"; do
            echo "$file was changed"
          done
          echo "MODIFIED_FILES=$MODIFIED_FILES" >> $GITHUB_ENV
      - name: Print files
        run: echo "${{ env.MODIFIED_FILES }}"

        
      - name: Get the list of required functions
        id: get_functions
        run: |
          functions=$(cat .github/scripts/playbook_functions.txt)
          echo "PLAYBOOK_FUNCTIONS=$(echo "$functions" | tr '\n' ' ')" >> $GITHUB_ENV

      
      - name: Get the list of assessment tools
        run: |
          tools=$(cat .github/scripts/assessment_tools.txt | tr '\n' '|')
          tools=${tools%|}
          echo "ASSESSMENT_TOOLS=$(echo "$tools")" >> $GITHUB_ENV

      - name: Print the list of required functions
        run: echo "Required functions= ${{ env.PLAYBOOK_FUNCTIONS }}"

      - name: Print the list of required tools
        run: echo "Required tools= ${{ env.ASSESSMENT_TOOLS }}"

      - name: Check for required functions
        run: |
          function_flag=false
          for file in $(echo "${{ env.MODIFIED_FILES }}" | grep -E "${{ env.ASSESSMENT_TOOLS }}" | grep '\-playbook\.sh$'); do
            # Check if the file ends with "-playbook.sh"
            for f in ${{ env.PLAYBOOK_FUNCTIONS }}; do

              if ! grep -q -w "function $f" $file
              then
                echo -e "\e[31mMissing function \e[33m$f\e[31m in \e[33m$file\e[0m"
                function_flag=true
              fi
            done
          done
          if [[ $function_flag == true ]] 
          then
            exit 1
          fi

  # Check_naming_convention:
  #   name: Check file naming conention
  #   runs-on: ubuntu-latest
    
  #   steps:
  #     - id: files
  #       uses: jitterbit/get-changed-files@v1
  #       with:
  #         format: 'csv'
  #       continue-on-error: true
  #     - run: |
  #         mapfile -d ',' -t added_modified_files < <(printf '%s,' '${{ steps.files.outputs.added_modified }}')
  #         MODIFIED_FILES=()
  #         for added_modified_file in "${added_modified_files[@]}"; do
  #           echo "Do something with this ${added_modified_file}."
  #           MODIFIED_FILES+=("$added_modified_file")
  #         done
  #         echo "MODIFIED_FILES=${MODIFIED_FILES[@]}" >> $GITHUB_ENV
  #     - name: Print files
  #       run: echo $MODIFIED_FILES
      
  #     - name: Get the list of assessment tools
  #       run: |
  #         tools=$(cat .github/scripts/assessment_tools.txt | tr '\n' '|')
  #         tools=${tools%|}
  #         echo "ASSESSMENT_TOOLS=$(echo "$tools")" >> $GITHUB_ENV
      
  #     - name: Print the list of assessment tools
  #       run: echo "Required tools= ${{ env.ASSESSMENT_TOOLS }}"

  #     - name: check for playbook files
  #       run: |
  #         check_flag=false
  #         for file in $(echo ${{ env.MODIFIED_FILES }} | grep '\-playbook\.sh$');
  #         do
  #           prefix=$(echo $file | cut -d "-" -f 1)
  #           tool_name=$(echo $file | cut -d "-" -f 2)
  #           version=$(echo $file | cut -d "-" -f 3)
  #           if [[ "$prefix" != "besman" ]]
  #           then
  #             echo -e "\e[31mMissing prefix \e[33mbesman\e[31m in \e[33m$file\e[0m"
  #           fi
            
  #           if ! echo "$tool_name" | grep -E "${{ env.ASSESSMENT_TOOLS }}"
  #           then
  #             echo -e "\e[31mMissing tool name in \e[33m$file\e[0m"
  #           fi
            
  #           if ! echo "$version" | grep -E '\b[0-9]+\.[0-9]+\.[0-9]+\b'"
  #           then
  #             echo -e "\e[31mMissing or Incorrect version in \e[33m$file\e[0m"
  #           fi
            
  #         done

  #     - name: check for steps files
  #       run: |
  #         check_flag=false
  #         for file in $(echo "${{ env.MODIFIED_FILES }}" | grep '\-steps\.[^.]*$');
  #         do
  #           prefix=$(echo $file | cut -d "-" -f 1)
  #           tool_name=$(echo $file | cut -d "-" -f 2)
  #           version=$(echo $file | cut -d "-" -f 3)
  #           if [[ "$prefix" != "besman" ]]
  #           then
  #             echo -e "\e[31mMissing prefix \e[33mbesman\e[31m in \e[33m$file\e[0m"
  #           fi
            
  #           if ! echo "$tool_name" | grep -E "${{ env.ASSESSMENT_TOOLS }}"
  #           then
  #             echo -e "\e[31mMissing tool name in \e[33m$file\e[0m"
  #           fi
            
  #           if ! echo "$version" | grep -E '\b[0-9]+\.[0-9]+\.[0-9]+\b'"
  #           then
  #             echo -e "\e[31mMissing or Incorrect version in \e[33m$file\e[0m"
  #           fi
            
  #         done